---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: controller-manager
  name: kubeslice-operator
  namespace: kubeslice-system
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
      spoke-cluster: {{ .Values.cluster.name }}
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        control-plane: controller-manager
        spoke-cluster: {{ .Values.cluster.name }}
    spec:
      containers:
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=10
        image: '{{ .Values.global.imageRegistry }}/kubebuilder-kube-rbac-proxy:0.18.2'
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
      - args:
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=:8080
        - --leader-elect
        - --chargeback-reconciler-interval=5m
        - --num-of-app-services-per-cr=50
        command:
        - /manager
        image: '{{ .Values.global.imageRegistry }}/{{ .Values.operator.image }}:{{ .Values.operator.tag }}'
        imagePullPolicy: '{{ .Values.operator.pullPolicy }}'
        env:
          - name: LOG_LEVEL
            value: {{ .Values.operator.logLevel }}
          - name: HUB_HOST_ENDPOINT
            valueFrom:
              secretKeyRef:
                name: {{ .Values.controllerSecretName }}
                key: endpoint
          - name: HUB_PROJECT_NAMESPACE
            valueFrom:
              secretKeyRef:
                name: {{ .Values.controllerSecretName }}
                key: namespace
          - name: CLUSTER_NAME
            value: {{ .Values.cluster.name }}
          - name: CLUSTER_ENDPOINT
            value: "{{ .Values.cluster.endpoint }}"
          - name: WORKER_INSTALLER_IMAGE
            value: "{{ .Values.global.imageRegistry }}/{{ .Values.workerInstaller.image }}:{{ .Values.workerInstaller.tag }}"
              {{- if and .Values.imagePullSecrets .Values.imagePullSecrets.repository .Values.imagePullSecrets.username .Values.imagePullSecrets.password }}
          - name: IMAGE_PULL_SECRET_NAME
            value: kubeslice-image-pull-secret
              {{- end }}
          - name: ENABLE_SLICE_CHARGEBACK
            value: "true"
          - name: EXCLUDED_NS
            value: '{{ .Values.operator.excludeNamespaces | join "," }}'
            
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        ports:
        - containerPort: 9443
          name: webhook-server
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 10m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
        volumeMounts:
          - name: kubeslice-worker-event-schema-conf
            mountPath: /events/event-schema/
          - mountPath: /var/run/secrets/kubernetes.io/hub-serviceaccount
            name: hub-secret
            readOnly: true
          - mountPath: /etc/webhook/certs
            name: webhook-certs
            readOnly: true
      serviceAccountName: kubeslice-controller-manager
      terminationGracePeriodSeconds: 10
      volumes:
        - name: kubeslice-worker-event-schema-conf
          configMap:
            name: kubeslice-worker-event-schema-conf
            defaultMode: 420
        - name: webhook-certs
          secret:
            secretName: kubeslice-admission-webhook-certs
        - name: hub-secret
          secret:
            defaultMode: 420
            secretName: {{ .Values.controllerSecretName }}
            items:
            - key: "ca.crt"
              path: "ca.crt"
            - key: "token"
              path: "token"
      {{- if .Values.imagePullSecretsName }}
      imagePullSecrets:
        - name: {{ .Values.imagePullSecretsName }}
      {{- end }}
---
apiVersion: v1
data:
  {{ if .Values.events.disabled }}
  worker.yaml: |-
    disabledEvents:
    - LicenseSecretNotFound
  {{ else }}
  worker.yaml: |- 
    disabledEvents:
    - LicenseSecretNotFound
  {{ end }} 
kind: ConfigMap
metadata:
  labels:
    name: event-schema
  name: kubeslice-worker-event-schema-conf
  namespace: kubeslice-system
